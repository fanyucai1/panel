#!/usr/bin/env perl -w
################################################
#For the evaluation of the result generated by #
#the de novo transcriptome assembly software   #
#Trinity                                       #
################################################
use strict;
use Getopt::Long;
use File::Basename;
use Cwd;
my $cwd = getcwd();

### Usage subroutine
sub Usage {
  print STDERR << "USAGE";
  Description: This script is used for the evaluation of the result generated by de novo 
  transcriptome assembly software Trinity
  Author: Longsheng.xing\@allwegene.com
  Version: 1.0
==============================================================================================
Options
		-i  --in    input FASTA-format sequence file
		-o  --out   output statistics file
		-h  --help  print this help info

==============================================================================================

USAGE

}

my $in;
my $out;
my $help;

GetOptions("in|i=s" => \$in,
           "out|o=s" => \$out,
           "help|h" => \$help);

if( !defined($in) || !defined($out) ||
    $help ) {
  &Usage();
  exit(1);

}

my ($N90, $N50, $N75);
my ($longest, $shortest, $median);
my ($contigLen,$len2count,$totalBase,$cnt);

($totalBase,$cnt,$contigLen,$len2count) = &readTrinityFasta($in);

### read file ###
sub readTrinityFasta {
  my $infile = shift;
  open IN,"<",$infile || die "Cannot open this file!$!";

  my @contigLen;
  my %len2count;
  my @seqs = ();
 
  my $cnt = 0;
  my $totalBase  = 0;
  while(<IN>) {
    chomp;
    if(/^>/) {
      $cnt++;
    }
    if(/^\w+/) {
      $seqs[$cnt - 1] .= $_;
    }
  }

  foreach my $i(0 .. $#seqs) {
    my $tmpLen = length $seqs[$i];
    push @contigLen,$tmpLen;
    $totalBase += $tmpLen;
  
    if($tmpLen < 300) {
      $len2count{'300'}++;
    }
    elsif($tmpLen >=300 && $tmpLen < 500) {
      $len2count{'300-500'}++;
    }
    elsif($tmpLen >= 500 && $tmpLen < 1000) {
      $len2count{'500-1000'}++;
    }
    elsif($tmpLen >= 1000 && $tmpLen < 2000) {
      $len2count{'1000-2000'}++;
    }
    elsif($tmpLen >= 2000) {
      $len2count{'2000'}++;
    }
  }

  return ($totalBase,$cnt,\@contigLen,\%len2count);
}


### output stats result
open OUT,">$out" || die "Cannot write to file!$!";

print OUT "A\ttotal\tof\t$cnt\trecords\n";
print OUT "Total\tnumber\tof\tbases\tis\t$totalBase\n";

my $meanLen;
if($totalBase > 0) {
  $meanLen = $totalBase / $cnt;
}

my @sortedContigs = sort {$b <=> $a} @$contigLen;    ### Ranking in descending order ###

$shortest = $sortedContigs[$cnt - 1];
$longest = $sortedContigs[0];

$median = &median(\@sortedContigs);

($N50,$N75,$N90) = &calNvalue(\@sortedContigs);

### Calculation of median value
sub median {
  my $sortedContigs = shift;
  my $median;

  my $count = scalar @$sortedContigs;
  if($count % 2 == 1) {
    $median = $sortedContigs->[($count + 1) / 2];
  	
  } else {
    $median = ($sortedContigs->[$count / 2] + $sortedContigs->[$count / 2 + 1]) / 2;	
  }

  return $median;
}

### Calculation of N50, N75 and N90 ###
sub calNvalue {
  my $sortedContigs = shift;
  my ($N50,$N75,$N90);

  my $sum = 0;

  foreach my $item(0 .. $#$sortedContigs) {
    $sum += $sortedContigs->[$item];
    
    if($sum >= $totalBase / 2) {
      $N50 = $sortedContigs->[$item];
      last;
    }
  }
  $sum = 0;

  foreach my $item(0 .. $#$sortedContigs) {
    $sum += $sortedContigs->[$item];
   
    if($sum >= ($totalBase * 3 / 4)) {
      $N75 = $sortedContigs->[$item];
      last;
    }
  }

  $sum = 0;
  foreach my $item(0 .. $#$sortedContigs) {
    $sum += $sortedContigs->[$item];
   
    if($sum >= ($totalBase * 9 / 10)) {
      $N90 = $sortedContigs->[$item];
      last;
    }
  }

  return ($N50,$N75,$N90);
}

### output results 
print OUT "N50\t$N50\n";
print OUT "N75\t$N75\n";
print OUT "N90\t$N90\n";
print OUT "Median\t$median\n";
print OUT "Longest\t$longest\n";
print OUT "Shortest\t$shortest\n";

print OUT "Length interval\tnumber of transcripts\n";


my @interval = ('300','300-500','500-1000','1000-2000','2000');
foreach my $i(0 .. $#interval) {
  print OUT "$interval[$i]\t$len2count->{$interval[$i]}\n";
}

close OUT;



